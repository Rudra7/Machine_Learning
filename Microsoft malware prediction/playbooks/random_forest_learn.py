{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"pygments_lexer":"ipython3","nbconvert_exporter":"python","version":"3.6.4","file_extension":".py","codemirror_mode":{"name":"ipython","version":3},"name":"python","mimetype":"text/x-python"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":10683,"databundleVersionId":220065,"sourceType":"competition"},{"sourceId":9891190,"sourceType":"kernelVersion"}],"dockerImageVersionId":20477,"isInternetEnabled":false,"language":"python","sourceType":"script","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# %% [code]\nimport pandas as pd\r\nfrom sklearn.ensemble import RandomForestClassifier\r\n\r\n\r\ndef create_nan_dict(data):\r\n    ret = dict()\r\n    for col in data:\r\n        if col != 'HasDetections' and col != 'MachineIdentifier':\r\n            ret[col] = data[col].astype('float32').mean()\r\n    return ret\r\n\r\n\r\ndef remove_nans(data, nan_dict):\r\n    for col in data:\r\n        if col != 'HasDetections' and col != 'MachineIdentifier':\r\n            data[col] = data[col].fillna(nan_dict[col])\r\n\r\n\r\n# Train the given learning algorithm. Predict the result and extract the output.\r\nprint('Loading the training set:')\r\ndtypes = {\r\n    'MachineIdentifier': 'category',\r\n    'AVProductsInstalled': 'float32',\r\n    'CountryIdentifier': 'float32',\r\n    'OrganizationIdentifier': 'float32',\r\n    'GeoNameIdentifier': 'float32',\r\n    'LocaleEnglishNameIdentifier': 'float32',\r\n    'OsBuild': 'int16',\r\n    'OsSuite': 'float32',\r\n    'OsPlatformSubRelease': 'float32',\r\n    'SkuEdition': 'float32',\r\n    'IeVerIdentifier': 'float32',\r\n    'SmartScreen': 'float32',\r\n    'Census_MDC2FormFactor': 'float32',\r\n    'Census_ProcessorCoreCount': 'float16',\r\n    'Census_ProcessorManufacturerIdentifier': 'float32',\r\n    'Census_PrimaryDiskTotalCapacity': 'float32',\r\n    'Census_PrimaryDiskTypeName': 'float32',\r\n    'Census_SystemVolumeTotalCapacity': 'float32',\r\n    'Census_TotalPhysicalRAM': 'float32',\r\n    'Census_ChassisTypeName': 'float32',\r\n    'Census_InternalPrimaryDiagonalDisplaySizeInInches': 'float16',\r\n    'Census_InternalPrimaryDisplayResolutionHorizontal': 'float16',\r\n    'Census_InternalPrimaryDisplayResolutionVertical': 'float16',\r\n    'Census_PowerPlatformRoleName': 'float32',\r\n    'Census_InternalBatteryType': 'float32',\r\n    'Census_InternalBatteryNumberOfCharges': 'float32',\r\n    'Census_OSBranch': 'float32',\r\n    'Census_OSBuildNumber': 'int16',\r\n    'Census_OSBuildRevision': 'int32',\r\n    'Census_OSEdition': 'float32',\r\n    'Census_OSSkuName': 'float32',\r\n    'Census_OSInstallTypeName': 'float32',\r\n    'Census_OSInstallLanguageIdentifier': 'float32',\r\n    'Census_OSUILocaleIdentifier': 'float32',\r\n    'Census_OSWUAutoUpdateOptionsName': 'float32',\r\n    'Census_GenuineStateName': 'float32',\r\n    'Census_ActivationChannel': 'float32',\r\n    'Census_IsFlightingInternal': 'float32',\r\n    'Census_ThresholdOptIn': 'float16',\r\n    'Census_IsSecureBootEnabled': 'int8',\r\n    'Census_IsWIMBootEnabled': 'float32',\r\n    'Census_IsTouchEnabled': 'int8',\r\n    'Wdft_IsGamer': 'float32',\r\n    'Wdft_RegionIdentifier': 'float32',\r\n    'HasDetections': 'int8',\r\n    'EngineVersion_0': 'float32',\r\n    'EngineVersion_1': 'float32',\r\n    'EngineVersion_2': 'float32',\r\n    'EngineVersion_3': 'float32',\r\n    'AppVersion_0': 'float32',\r\n    'AppVersion_1': 'float32',\r\n    'AppVersion_2': 'float32',\r\n    'AppVersion_3': 'float32',\r\n    'AvSigVersion_0': 'float32',\r\n    'AvSigVersion_1': 'float32',\r\n    'AvSigVersion_2': 'float32',\r\n    'AvSigVersion_3': 'float32',\r\n    'Census_OSVersion_0': 'float32',\r\n    'Census_OSVersion_1': 'float32',\r\n    'Census_OSVersion_2': 'float32',\r\n    'Census_OSVersion_3': 'float32'\r\n}\r\n\r\n# Read the data set\r\ntraining_set = pd.read_csv('../input/prepare-data-for-decision-trees-algorithms/training_decisionTrees.csv',\r\n                           dtype=dtypes)\r\nprint('Training set loaded')\r\nprint(training_set.shape)\r\n\r\n# Handle NaNs\r\nprint('Handling NaN in training set')\r\nnan_to_num_dict = create_nan_dict(training_set)\r\nremove_nans(training_set, nan_to_num_dict)\r\nprint('Done')\r\n\r\n\r\n# Now we remove columns that have only one value. Those columns are not relevant for Decision Tree and can be removed\r\n# for run time\r\ncolumns_to_remove = []\r\nfor col_name in training_set.columns.values:\r\n    if col_name == 'HasDetections' or col_name == 'MachineIdentifier':\r\n        continue\r\n    unique_values = training_set[col_name].value_counts(dropna=False)\r\n    if len(unique_values) == 1:\r\n        del training_set[col_name]\r\n        columns_to_remove.append(col_name)\r\n\r\nprint(str(len(columns_to_remove)) + ' columns removed')\r\nprint(training_set.shape)\r\n\r\n# Prepare the learning\r\nfeatures = [c for c in training_set.columns if c not in ['MachineIdentifier', 'HasDetections']]\r\nx_train = training_set[features]\r\ny_train = training_set['HasDetections']\r\ndel training_set\r\n\r\nrand_forest = RandomForestClassifier(n_estimators=200, min_samples_leaf=20, n_jobs=-1)\r\nprint('learning')\r\nrand_forest.fit(x_train, y_train)\r\nprint('Done')\r\ndel x_train, y_train\r\n\r\n# Read the test set and parse it\r\ntest = pd.read_csv('../input/prepare-data-for-decision-trees-algorithms/test_decisionTrees.csv', dtype=dtypes)\r\nremove_nans(test, nan_to_num_dict)\r\nx_test = test[features]\r\nto_submit = pd.DataFrame(test['MachineIdentifier'])\r\ndel test\r\ny_pred = rand_forest.predict_proba(x_test)[:, 1]\r\nto_submit['HasDetections'] = y_pred\r\nto_submit.to_csv('randomForest_minLeaf_10.csv', index=False)\r\n","metadata":{"_uuid":"ebbb6999-6509-403b-a770-2a4300ec6542","_cell_guid":"e8c6b282-7bce-49cd-8dbd-147e3e41fdb4","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":null}]}