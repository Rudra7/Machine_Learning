{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"pygments_lexer":"ipython3","nbconvert_exporter":"python","version":"3.6.4","file_extension":".py","codemirror_mode":{"name":"ipython","version":3},"name":"python","mimetype":"text/x-python"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":10683,"databundleVersionId":220065,"sourceType":"competition"}],"dockerImageVersionId":18195,"isInternetEnabled":false,"language":"python","sourceType":"script","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# %% [code]\n\"\"\"\nThis script use several different distributions od dataset to build lightGBM cv models to get better performance \n\"\"\"\nimport os\nimport gc\nfrom functools import partial, wraps\nfrom datetime import datetime as dt\nimport warnings\nwarnings.simplefilter('ignore', FutureWarning)\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.model_selection import StratifiedKFold\n\nimport lightgbm as lgb\n\n\nTARGET = 'HasDetections'\nTARGET_INDEX = 'MachineIdentifier'\n\n\ndef modeling_cross_validation(params, X, y, nr_folds=5):\n    clfs = list()\n    oof_preds = np.zeros(X.shape[0])\n    # Split data with kfold\n    kfolds = StratifiedKFold(n_splits=nr_folds, shuffle=False, random_state=42)\n    for n_fold, (trn_idx, val_idx) in enumerate(kfolds.split(X, y)):\n        X_train, y_train = X.iloc[trn_idx], y.iloc[trn_idx]\n        X_valid, y_valid = X.iloc[val_idx], y.iloc[val_idx]\n\n        # LightGBM Regressor estimator\n        model = lgb.LGBMClassifier(**params)\n        model.fit(\n            X_train, y_train,\n            eval_set=[(X_valid, y_valid)],\n            verbose=-1, eval_metric='auc',\n            early_stopping_rounds=100\n        )\n\n        clfs.append(model)\n        oof_preds[val_idx] = model.predict(X_valid, num_iteration=model.best_iteration_)\n        \n    score = roc_auc_score(y, oof_preds)\n    print('auc {}'.format(score))\n    return clfs, score\n\n\ndef get_importances(clfs, feature_names):\n    # Make importance dataframe\n    importances = pd.DataFrame()\n    for i, model in enumerate(clfs, 1):\n        # Feature importance\n        imp_df = pd.DataFrame({\n                \"feature\": feature_names, \n                \"gain\": model.booster_.feature_importance(importance_type='gain'),\n                \"fold\": model.n_features_,\n                })\n        importances = pd.concat([importances, imp_df], axis=0, sort=False)\n\n    importances['gain_log'] = importances['gain']\n    mean_gain = importances[['gain', 'feature']].groupby('feature').mean()\n    importances['mean_gain'] = importances['feature'].map(mean_gain['gain'])\n    importances.to_csv('importance.csv', index=False)\n    # plt.figure(figsize=(8, 12))\n    # sns.barplot(x='gain_log', y='feature', data=importances.sort_values('mean_gain', ascending=False))\n    return importances\n\n\ndef predict_cross_validation(test, clfs):\n    sub_preds = np.zeros(test.shape[0])\n    for i, model in enumerate(clfs, 1):    \n        test_preds = model.predict_proba(test, num_iteration=model.best_iteration_)\n        sub_preds += test_preds[:,1]\n\n    sub_preds = sub_preds / len(clfs)\n    ret = pd.Series(sub_preds, index=test.index)\n    ret.index.name = test.index.name\n    return ret\n\n\ndef predict_test_chunk(features, clfs, dtypes, filename='tmp.csv', chunks=100000):\n    \n    for i_c, df in enumerate(pd.read_csv('../input/test.csv', \n                                         chunksize=chunks, \n                                         dtype=dtypes, \n                                         iterator=True)):\n        \n        df.set_index(TARGET_INDEX, inplace=True)\n        preds_df = predict_cross_validation(df[features], clfs)\n        preds_df = preds_df.to_frame(TARGET)\n\n        if i_c == 0:\n            preds_df.to_csv(filename, header=True, mode='a', index=True)\n        else:\n            preds_df.to_csv(filename, header=False, mode='a', index=True)\n    \n        del preds_df\n        gc.collect()\n\n\ndef main():\n    \n    # dtype casting from https://www.kaggle.com/theoviel/load-the-totality-of-the-data\n    dtypes = {\n        #'MachineIdentifier':                                    'category',\n        'ProductName':                                          'category',\n        'EngineVersion':                                        'category',\n        'AppVersion':                                           'category',\n        'AvSigVersion':                                         'category',\n        'IsBeta':                                               'int8',\n        'RtpStateBitfield':                                     'float16',\n        'IsSxsPassiveMode':                                     'int8',\n        'DefaultBrowsersIdentifier':                            'float16',\n        'AVProductStatesIdentifier':                            'float32',\n        'AVProductsInstalled':                                  'float16',\n        'AVProductsEnabled':                                    'float16',\n        'HasTpm':                                               'int8',\n        'CountryIdentifier':                                    'int32',\n        'CityIdentifier':                                       'float32',\n        'OrganizationIdentifier':                               'float16',\n        'GeoNameIdentifier':                                    'float32',\n        'LocaleEnglishNameIdentifier':                          'int32',\n        'Platform':                                             'category',\n        'Processor':                                            'category',\n        'OsVer':                                                'category',\n        'OsBuild':                                              'int16',\n        'OsSuite':                                              'int16',\n        'OsPlatformSubRelease':                                 'category',\n        'OsBuildLab':                                           'category',\n        'SkuEdition':                                           'category',\n        'IsProtected':                                          'float16',\n        'AutoSampleOptIn':                                      'int8',\n        'PuaMode':                                              'category',\n        'SMode':                                                'float16',\n        'IeVerIdentifier':                                      'float32',\n        'SmartScreen':                                          'category',\n        'Firewall':                                             'float16',\n        'UacLuaenable':                                         'float64',\n        'Census_MDC2FormFactor':                                'category',\n        'Census_DeviceFamily':                                  'category',\n        'Census_OEMNameIdentifier':                             'float32',\n        'Census_OEMModelIdentifier':                            'float32',\n        'Census_ProcessorCoreCount':                            'float16',\n        'Census_ProcessorManufacturerIdentifier':               'float16',\n        'Census_ProcessorModelIdentifier':                      'float32',\n        'Census_ProcessorClass':                                'category',\n        'Census_PrimaryDiskTotalCapacity':                      'float32',\n        'Census_PrimaryDiskTypeName':                           'category',\n        'Census_SystemVolumeTotalCapacity':                     'float32',\n        'Census_HasOpticalDiskDrive':                           'int8',\n        'Census_TotalPhysicalRAM':                              'float32',\n        'Census_ChassisTypeName':                               'category',\n        'Census_InternalPrimaryDiagonalDisplaySizeInInches':    'float32',\n        'Census_InternalPrimaryDisplayResolutionHorizontal':    'float32',\n        'Census_InternalPrimaryDisplayResolutionVertical':      'float32',\n        'Census_PowerPlatformRoleName':                         'category',\n        'Census_InternalBatteryType':                           'category',\n        'Census_InternalBatteryNumberOfCharges':                'float32',\n        'Census_OSVersion':                                     'category',\n        'Census_OSArchitecture':                                'category',\n        'Census_OSBranch':                                      'category',\n        'Census_OSBuildNumber':                                 'int32',\n        'Census_OSBuildRevision':                               'int32',\n        'Census_OSEdition':                                     'category',\n        'Census_OSSkuName':                                     'category',\n        'Census_OSInstallTypeName':                             'category',\n        'Census_OSInstallLanguageIdentifier':                   'float16',\n        'Census_OSUILocaleIdentifier':                          'int32',\n        'Census_OSWUAutoUpdateOptionsName':                     'category',\n        'Census_IsPortableOperatingSystem':                     'int8',\n        'Census_GenuineStateName':                              'category',\n        'Census_ActivationChannel':                             'category',\n        'Census_IsFlightingInternal':                           'float16',\n        'Census_IsFlightsDisabled':                             'float16',\n        'Census_FlightRing':                                    'category',\n        'Census_ThresholdOptIn':                                'float16',\n        'Census_FirmwareManufacturerIdentifier':                'float32',\n        'Census_FirmwareVersionIdentifier':                     'float32',\n        'Census_IsSecureBootEnabled':                           'int8',\n        'Census_IsWIMBootEnabled':                              'float16',\n        'Census_IsVirtualDevice':                               'float16',\n        'Census_IsTouchEnabled':                                'int8',\n        'Census_IsPenCapable':                                  'int8',\n        'Census_IsAlwaysOnAlwaysConnectedCapable':              'float16',\n        'Wdft_IsGamer':                                         'float16',\n        'Wdft_RegionIdentifier':                                'float32',\n        'HasDetections':                                        'int8'\n    }\n        \n    model_params = {\n        'device': 'cpu', \n        'objective': 'binary',\n        'boosting_type': 'gbdt', \n        'learning_rate': 0.03,\n        'max_depth': 11,\n        'num_leaves': 31,\n        'n_estimators': 2500,\n        'bagging_fraction': 0.7,\n        'feature_fraction': 0.7,\n        'bagging_freq': 2,\n        'bagging_seed': 2018,\n        'min_child_samples': 80, \n        'min_child_weight': 100.0, \n        'min_split_gain': 0.1, \n        'reg_alpha': 0.005, \n        'reg_lambda': 0.1, \n        'subsample_for_bin': 25000, \n        'min_data_per_group': 100, \n        'max_cat_to_onehot': 4, \n        'cat_l2': 25.0, \n        'cat_smooth': 2.0, \n        'max_cat_threshold': 32, \n        'random_state': 1,\n        'silent': True,\n        'metric': \"auc\",\n    }\n\n    train_features = list()\n    \n    chunks = 3000000\n    result_filenames = list()\n    for i_c, train in enumerate(pd.read_csv('../input/train.csv', \n                                            chunksize=chunks, \n                                            dtype=dtypes, \n                                            iterator=True)):\n\n        train = train.set_index(TARGET_INDEX)\n        \n        if chunks != train.shape[0]:\n            break\n        \n        if not train_features:\n            train_features = [f for f in train.columns if f != TARGET]\n    \n        # modeling\n        clfs, score = modeling_cross_validation(model_params, train[train_features], train[TARGET])\n        \n        del train\n        gc.collect()\n        \n        filename = 'subm_{:.6f}_{}_{}.csv'.format(score, 'LGBM', dt.now().strftime('%Y-%m-%d-%H-%M'))\n        predict_test_chunk(train_features, clfs, dtypes, filename=filename, chunks=100000)\n\n        result_filenames.append(filename)\n    \n    filename = 'subm_mean_{}_{}.csv'.format('LGBM', dt.now().strftime('%Y-%m-%d-%H-%M'))\n    subm = pd.concat([pd.read_csv(f) for f in result_filenames])\n    subm = subm.groupby(TARGET_INDEX).mean()\n    print('save to {}'.format(filename))\n    subm.to_csv(filename, index=True)\n\n\nif __name__ == '__main__':\n    main()\n","metadata":{"_uuid":"d6949f97-c424-413a-8d5c-b2d54ff69e27","_cell_guid":"9af4fe38-2820-44f3-810f-155bf9e32296","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":null}]}