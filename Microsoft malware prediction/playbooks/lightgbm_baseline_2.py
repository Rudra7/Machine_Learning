{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"pygments_lexer":"ipython3","nbconvert_exporter":"python","version":"3.6.4","file_extension":".py","codemirror_mode":{"name":"ipython","version":3},"name":"python","mimetype":"text/x-python"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":10683,"databundleVersionId":220065,"sourceType":"competition"},{"sourceId":311198,"sourceType":"datasetVersion","datasetId":130244}],"dockerImageVersionId":21695,"isInternetEnabled":false,"language":"python","sourceType":"script","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# %% [code]\nimport pandas as pd\nimport numpy as np\nimport lightgbm as lgb\nfrom scipy.sparse import vstack, csr_matrix, save_npz, load_npz\nfrom sklearn.preprocessing import LabelEncoder, OneHotEncoder\nfrom sklearn.model_selection import StratifiedKFold, KFold\nfrom sklearn.metrics import roc_auc_score\nimport gc\ngc.enable()\n\ndtypes = {\n    'MachineIdentifier':                                    'category',\n    'ProductName':                                          'category',\n    'EngineVersion':                                        'category',\n    'AppVersion':                                           'category',\n    'AvSigVersion':                                         'category',\n    'IsBeta':                                               'int8',\n    'RtpStateBitfield':                                     'float16',\n    'IsSxsPassiveMode':                                     'int8',\n    'DefaultBrowsersIdentifier':                            'float16',\n    'AVProductStatesIdentifier':                            'float32',\n    'AVProductsInstalled':                                  'float16',\n    'AVProductsEnabled':                                    'float16',\n    'HasTpm':                                               'int8',\n    'CountryIdentifier':                                    'int16',\n    'CityIdentifier':                                       'float32',\n    'OrganizationIdentifier':                               'float16',\n    'GeoNameIdentifier':                                    'float16',\n    'LocaleEnglishNameIdentifier':                          'int8',\n    'Platform':                                             'category',\n    'Processor':                                            'category',\n    'OsVer':                                                'category',\n    'OsBuild':                                              'int16',\n    'OsSuite':                                              'int16',\n    'OsPlatformSubRelease':                                 'category',\n    'OsBuildLab':                                           'category',\n    'SkuEdition':                                           'category',\n    'IsProtected':                                          'float16',\n    'AutoSampleOptIn':                                      'int8',\n    'PuaMode':                                              'category',\n    'SMode':                                                'float16',\n    'IeVerIdentifier':                                      'float16',\n    'SmartScreen':                                          'category',\n    'Firewall':                                             'float16',\n    'UacLuaenable':                                         'float32',\n    'Census_MDC2FormFactor':                                'category',\n    'Census_DeviceFamily':                                  'category',\n    'Census_OEMNameIdentifier':                             'float16',\n    'Census_OEMModelIdentifier':                            'float32',\n    'Census_ProcessorCoreCount':                            'float16',\n    'Census_ProcessorManufacturerIdentifier':               'float16',\n    'Census_ProcessorModelIdentifier':                      'float16',\n    'Census_ProcessorClass':                                'category',\n    'Census_PrimaryDiskTotalCapacity':                      'float32',\n    'Census_PrimaryDiskTypeName':                           'category',\n    'Census_SystemVolumeTotalCapacity':                     'float32',\n    'Census_HasOpticalDiskDrive':                           'int8',\n    'Census_TotalPhysicalRAM':                              'float32',\n    'Census_ChassisTypeName':                               'category',\n    'Census_InternalPrimaryDiagonalDisplaySizeInInches':    'float16',\n    'Census_InternalPrimaryDisplayResolutionHorizontal':    'float16',\n    'Census_InternalPrimaryDisplayResolutionVertical':      'float16',\n    'Census_PowerPlatformRoleName':                         'category',\n    'Census_InternalBatteryType':                           'category',\n    'Census_InternalBatteryNumberOfCharges':                'float32',\n    'Census_OSVersion':                                     'category',\n    'Census_OSArchitecture':                                'category',\n    'Census_OSBranch':                                      'category',\n    'Census_OSBuildNumber':                                 'int16',\n    'Census_OSBuildRevision':                               'int32',\n    'Census_OSEdition':                                     'category',\n    'Census_OSSkuName':                                     'category',\n    'Census_OSInstallTypeName':                             'category',\n    'Census_OSInstallLanguageIdentifier':                   'float16',\n    'Census_OSUILocaleIdentifier':                          'int16',\n    'Census_OSWUAutoUpdateOptionsName':                     'category',\n    'Census_IsPortableOperatingSystem':                     'int8',\n    'Census_GenuineStateName':                              'category',\n    'Census_ActivationChannel':                             'category',\n    'Census_IsFlightingInternal':                           'float16',\n    'Census_IsFlightsDisabled':                             'float16',\n    'Census_FlightRing':                                    'category',\n    'Census_ThresholdOptIn':                                'float16',\n    'Census_FirmwareManufacturerIdentifier':                'float16',\n    'Census_FirmwareVersionIdentifier':                     'float32',\n    'Census_IsSecureBootEnabled':                           'int8',\n    'Census_IsWIMBootEnabled':                              'float16',\n    'Census_IsVirtualDevice':                               'float16',\n    'Census_IsTouchEnabled':                                'int8',\n    'Census_IsPenCapable':                                  'int8',\n    'Census_IsAlwaysOnAlwaysConnectedCapable':              'float16',\n    'Wdft_IsGamer':                                         'float16',\n    'Wdft_RegionIdentifier':                                'float16',\n    'HasDetections':                                        'int8'\n}\n\nprint('### Load Train and Test Data.\\n')\nimport os\nprint(os.listdir(\"../input\"))\ntrain = pd.read_csv('../input/microsoft-malware-prediction/train.csv', dtype=dtypes, low_memory=True)\ntrain['MachineIdentifier'] = train.index.astype('uint32')\ntest  = pd.read_csv('../input/microsoft-malware-prediction/test.csv',  dtype=dtypes, low_memory=True)\ntest['MachineIdentifier']  = test.index.astype('uint32')\nprint('### Finished Load Train and Test Data!')\n\ngc.collect()\n\ny_train = np.array(train['HasDetections'])\ntrain_ids = train.index\ntest_ids  = test.index\n\ndel train['HasDetections'], train['MachineIdentifier'], test['MachineIdentifier']\ngc.collect()\n\nm = 100000\nskf = StratifiedKFold(n_splits=5, shuffle=True, random_state=100)\nskf.get_n_splits(train_ids, y_train)\n\nprint('\\n### Training LightGBM #2 ...\\n')\n\nlgb_test_result  = np.zeros(test_ids.shape[0])\nlgb_train_result = np.zeros(train_ids.shape[0])\ncounter = 0\n\nfor train_index, test_index in skf.split(train_ids, y_train):\n    \n    print('Fold {}\\n'.format(counter + 1))\n    \n    train = load_npz('../input/malware-v01/train.npz')\n    X_fit = vstack([train[train_index[i*m:(i+1)*m]] for i in range(train_index.shape[0] // m + 1)])\n    X_val = vstack([train[test_index[i*m:(i+1)*m]]  for i in range(test_index.shape[0] //  m + 1)])\n    X_fit, X_val = csr_matrix(X_fit, dtype='float32'), csr_matrix(X_val, dtype='float32')\n    y_fit, y_val = y_train[train_index], y_train[test_index]\n    \n    del train\n    gc.collect()\n\n    lgb_model = lgb.LGBMClassifier(num_leaves=60,\n                                   n_estimators=1000,\n                                   min_data_in_leaf=60,\n                                   objective='binary',\n                                   max_depth=-1,\n                                   learning_rate=0.1,\n                                   boosting='gbdt',\n                                   feature_fraction=0.8,\n                                   bagging_freq=1,\n                                   bagging_fraction=0.8,\n                                   bagging_seed=11,\n                                   metric='auc',\n                                   lambda_l1=0.1,\n                                   random_state=133)\n                               \n    lgb_model.fit(X_fit, y_fit, eval_metric='auc', \n                  eval_set=[(X_val, y_val)], \n                  verbose=100, early_stopping_rounds=100)\n\n    lgb_train_result[test_index] += lgb_model.predict_proba(X_val)[:,1]\n    \n    del X_fit, X_val, y_fit, y_val, train_index, test_index\n    gc.collect()\n    \n    test = load_npz('../input/malware-v01/test.npz')\n    test = csr_matrix(test, dtype='float32')\n    lgb_test_result += lgb_model.predict_proba(test)[:,1]\n    counter += 1\n    \n    del test\n    gc.collect()\n\nprint('\\n=> LigthGBM VAL AUC Score #1: {}'.format(roc_auc_score(y_train, lgb_train_result)))\n\nprint('### Make submission ...\\n')\nsubmission = pd.read_csv('../input/microsoft-malware-prediction/sample_submission.csv')\nsubmission['HasDetections'] = lgb_test_result / counter\nsubmission.to_csv('lgb_submission.csv', index=False)\n\nprint('### Saving results ...')\noof_train_result = pd.DataFrame()\noof_train_result['y'] = lgb_train_result\noof_train_result.to_csv('lgb_train_result_2.csv', index=False)\noof_test_result = pd.DataFrame()\noof_test_result['y'] = lgb_test_result\noof_test_result.to_csv('lgb_test_result_2.csv', index=False)\n\nprint('\\n### Finished LightGBM #2 !!!\\n')\n\nprint('\\n### Done.')","metadata":{"_uuid":"b98348df-c511-48fc-a095-48969d19b86e","_cell_guid":"40ba2f7e-3998-48d2-b7be-93601b19f162","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":null}]}