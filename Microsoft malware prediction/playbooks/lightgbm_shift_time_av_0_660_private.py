{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"pygments_lexer":"ipython3","nbconvert_exporter":"python","version":"3.6.4","file_extension":".py","codemirror_mode":{"name":"ipython","version":3},"name":"python","mimetype":"text/x-python"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":10683,"databundleVersionId":220065,"sourceType":"competition"}],"dockerImageVersionId":22557,"isInternetEnabled":false,"language":"python","sourceType":"script","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# %% [code]\n#This was my highest submission in the competition. A very early draft that shifts the time of the Test set to match the Train distribution. \r\n\r\nimport pandas as pd\r\nimport numpy as np\r\nimport lightgbm as lgb\r\nfrom scipy.sparse import vstack, csr_matrix, save_npz, load_npz\r\nfrom sklearn.preprocessing import LabelEncoder, OneHotEncoder\r\nfrom sklearn.model_selection import StratifiedKFold\r\n#from sklearn.metrics import roc_auc_score\r\nimport gc\r\ngc.enable()\r\n\r\ndtypes = {\r\n        'MachineIdentifier':                                    'category',\r\n        'ProductName':                                          'category',\r\n        'EngineVersion':                                        'category',\r\n        'AppVersion':                                           'category',\r\n        'AvSigVersion':                                         'category',\r\n        'IsBeta':                                               'int8',\r\n        'RtpStateBitfield':                                     'category',\r\n        'IsSxsPassiveMode':                                     'int8',\r\n        'DefaultBrowsersIdentifier':                            'float16',\r\n        'AVProductStatesIdentifier':                            'category',\r\n        'AVProductsInstalled':                                  'category',\r\n        'AVProductsEnabled':                                    'float16',\r\n        'HasTpm':                                               'int8',\r\n        'CountryIdentifier':                                    'int16',\r\n        'CityIdentifier':                                       'float32',\r\n        'OrganizationIdentifier':                               'float16',\r\n        'GeoNameIdentifier':                                    'float16',\r\n        'LocaleEnglishNameIdentifier':                          'int8',\r\n        'Platform':                                             'category',\r\n        'Processor':                                            'category',\r\n        'OsVer':                                                'category',\r\n        'OsBuild':                                              'int16',\r\n        'OsSuite':                                              'int16',\r\n        'OsPlatformSubRelease':                                 'category',\r\n        'OsBuildLab':                                           'category',\r\n        'SkuEdition':                                           'category',\r\n        'IsProtected':                                          'float16',\r\n        'AutoSampleOptIn':                                      'int8',\r\n        'PuaMode':                                              'category',\r\n        'SMode':                                                'float16',\r\n        'IeVerIdentifier':                                      'float16',\r\n        'SmartScreen':                                          'category',\r\n        'Firewall':                                             'float16',\r\n        'UacLuaenable':                                         'category',\r\n        'Census_MDC2FormFactor':                                'category',\r\n        'Census_DeviceFamily':                                  'category',\r\n        'Census_OEMNameIdentifier':                             'float16',\r\n        'Census_OEMModelIdentifier':                            'float32',\r\n        'Census_ProcessorCoreCount':                            'category',\r\n        'Census_ProcessorManufacturerIdentifier':               'category',\r\n        'Census_ProcessorModelIdentifier':                      'float16',\r\n        'Census_ProcessorClass':                                'category',\r\n        'Census_PrimaryDiskTotalCapacity':                      'float32',\r\n        'Census_PrimaryDiskTypeName':                           'category',\r\n        'Census_SystemVolumeTotalCapacity':                     'float32',\r\n        'Census_HasOpticalDiskDrive':                           'int8',\r\n        'Census_TotalPhysicalRAM':                              'float32',\r\n        'Census_ChassisTypeName':                               'category',\r\n        'Census_InternalPrimaryDiagonalDisplaySizeInInches':    'float16',\r\n        'Census_InternalPrimaryDisplayResolutionHorizontal':    'float16',\r\n        'Census_InternalPrimaryDisplayResolutionVertical':      'float16',\r\n        'Census_PowerPlatformRoleName':                         'category',\r\n        'Census_InternalBatteryType':                           'category',\r\n        'Census_InternalBatteryNumberOfCharges':                'float32',\r\n        'Census_OSVersion':                                     'category',\r\n        'Census_OSArchitecture':                                'category',\r\n        'Census_OSBranch':                                      'category',\r\n        'Census_OSBuildNumber':                                 'int16',\r\n        'Census_OSBuildRevision':                               'int32',\r\n        'Census_OSEdition':                                     'category',\r\n        'Census_OSSkuName':                                     'category',\r\n        'Census_OSInstallTypeName':                             'category',\r\n        'Census_OSInstallLanguageIdentifier':                   'float16',\r\n        'Census_OSUILocaleIdentifier':                          'int16',\r\n        'Census_OSWUAutoUpdateOptionsName':                     'category',\r\n        'Census_IsPortableOperatingSystem':                     'int8',\r\n        'Census_GenuineStateName':                              'category',\r\n        'Census_ActivationChannel':                             'category',\r\n        'Census_IsFlightingInternal':                           'float16',\r\n        'Census_IsFlightsDisabled':                             'float16',\r\n        'Census_FlightRing':                                    'category',\r\n        'Census_ThresholdOptIn':                                'float16',\r\n        'Census_FirmwareManufacturerIdentifier':                'float16',\r\n        'Census_FirmwareVersionIdentifier':                     'float32',\r\n        'Census_IsSecureBootEnabled':                           'int8',\r\n        'Census_IsWIMBootEnabled':                              'float16',\r\n        'Census_IsVirtualDevice':                               'float16',\r\n        'Census_IsTouchEnabled':                                'int8',\r\n        'Census_IsPenCapable':                                  'int8',\r\n        'Census_IsAlwaysOnAlwaysConnectedCapable':              'float16',\r\n        'Wdft_IsGamer':                                         'float16',\r\n        'Wdft_RegionIdentifier':                                'float16',\r\n        'HasDetections':                                        'int8'\r\n        }\r\n\r\nno_encoding = ['Census_OSWUAutoUpdateOptionsName', 'ProductName', 'Census_ActivationChannel', \r\n            'Census_PrimaryDiskTypeName', 'Platform', 'Census_ProcessorClass', \r\n            'Census_OSArchitecture', 'Processor', 'Census_DeviceFamily', 'PuaMode', \r\n            'Census_IsFlightingInternal', 'Census_ThresholdOptIn', 'Census_IsWIMBootEnabled', \r\n            'SMode', 'Wdft_IsGamer', 'Census_IsFlightsDisabled', 'Firewall', \r\n            'Census_IsAlwaysOnAlwaysConnectedCapable', 'IsProtected', 'Census_IsVirtualDevice', \r\n            'Census_IsSecureBootEnabled', 'AutoSampleOptIn', 'HasTpm', 'Census_IsPortableOperatingSystem', \r\n            'Census_IsPenCapable', 'Census_HasOpticalDiskDrive', 'IsSxsPassiveMode', 'IsBeta', \r\n            'Census_IsTouchEnabled', 'SkuEdition', 'OsPlatformSubRelease', 'Census_OSInstallTypeName', \r\n            'Census_PowerPlatformRoleName', 'Census_FlightRing', 'Census_MDC2FormFactor', \r\n            'Census_OSInstallLanguageIdentifier', 'AVProductsEnabled']\r\n\r\nfreq_unused = ['Census_OEMModelIdentifier', 'CityIdentifier', 'Census_FirmwareVersionIdentifier', \r\n            'Census_InternalBatteryNumberOfCharges', 'AVProductStatesIdentifier', 'Census_ProcessorModelIdentifier', \r\n            'Census_OEMNameIdentifier', 'DefaultBrowsersIdentifier', 'IeVerIdentifier', 'GeoNameIdentifier', \r\n            'LocaleEnglishNameIdentifier', 'CountryIdentifier', 'OrganizationIdentifier', 'Census_ChassisTypeName', \r\n            'OsSuite', 'Wdft_RegionIdentifier', 'Census_OSUILocaleIdentifier', 'Census_FirmwareManufacturerIdentifier', \r\n            'OsBuildLab', 'Census_OSVersion', 'Census_OSBuildRevision', 'Census_OSBuildNumber', 'OsBuild', \r\n            'OsVer', 'Census_InternalBatteryType', 'Census_OSSkuName', 'Census_OSBranch', 'Census_OSEdition']\r\n\r\nfactorize = ['Census_SystemVolumeTotalCapacity', 'Census_PrimaryDiskTotalCapacity', 'Census_TotalPhysicalRAM', \r\n            'Census_InternalPrimaryDisplayResolutionHorizontal', 'Census_InternalPrimaryDisplayResolutionVertical', \r\n            'Census_InternalPrimaryDiagonalDisplaySizeInInches']\r\n\r\nmanual_encondig = ['AVProductsInstalled', 'UacLuaenable', 'SmartScreen', 'Census_ProcessorCoreCount', \r\n            'Census_ProcessorManufacturerIdentifier', 'RtpStateBitfield', 'Census_GenuineStateName']\r\n\r\ntime_features = ['AvSigVersion', 'AppVersion', 'EngineVersion']\r\n\r\nusecolums = no_encoding+freq_unused+factorize+manual_encondig+time_features\r\n\r\nprint('Download Train and Test Data.\\n')\r\ntrain = pd.read_csv('../input/train.csv', dtype=dtypes, low_memory=True) #usecols=usecolums+['HasDetections', 'MachineIdentifier'], \r\ntrain['MachineIdentifier'] = train.index.astype('uint32')\r\ntest  = pd.read_csv('../input/test.csv', dtype=dtypes, low_memory=True) #usecols=usecolums+['MachineIdentifier'], \r\ntest['MachineIdentifier']  = test.index.astype('uint32')\r\n\r\ngc.collect()\r\n\r\nprint(\"Frequency Encoding Features.\\n\")\r\ndef frequency_and_unused(df_train, df_test, feature, threshold=1000):\r\n    print(\"Encoding Feature: \", feature)\r\n    print(\"Set as category: \", feature)\r\n    df_train[feature] = df_train[feature].astype('category')\r\n    df_test[feature] = df_test[feature].astype('category')\r\n    \r\n    print(\"Look for differences: \", feature)\r\n    trainvaluesnotintest = set(df_train[feature].unique()) - set(df_test[feature].unique())\r\n    testvaluesnotintrain = set(df_test[feature].unique()) - set(df_train[feature].unique())\r\n\r\n    print(\"Replace values not in Train/Test: \", feature)\r\n    df_train.loc[df_train[feature].isin(trainvaluesnotintest), feature] = None\r\n    df_test.loc[df_test[feature].isin(testvaluesnotintrain), feature] = None\r\n\r\n    print(\"Remove unused categories: \", feature)\r\n    df_train[feature] = df_train[feature].cat.remove_unused_categories()\r\n    df_test[feature] = df_test[feature].cat.remove_unused_categories()\r\n\r\n    print(\"Remove items less than or equal to threshold: \", feature)\r\n    #threshold = 100  # Remove items less than or equal to threshold\r\n    vc = df_train[feature].value_counts()\r\n    vals_to_remove = vc[vc <= threshold].index.values\r\n    df_train.loc[df_train[feature].isin(vals_to_remove), feature] = None\r\n    vc = df_test[feature].value_counts()\r\n    vals_to_remove = vc[vc <= threshold].index.values\r\n    df_test.loc[df_test[feature].isin(vals_to_remove), feature] = None\r\n\r\n    print(\"Look for differences: \", feature)\r\n    trainvaluesnotintest = set(df_train[feature].unique()) - set(df_test[feature].unique())\r\n    testvaluesnotintrain = set(df_test[feature].unique()) - set(df_train[feature].unique())\r\n\r\n    print(\"Replace values not in Train/Test: \", feature)\r\n    df_train.loc[df_train[feature].isin(trainvaluesnotintest), feature] = None\r\n    df_test.loc[df_test[feature].isin(testvaluesnotintrain), feature] = None\r\n\r\n    print(\"Remove unused categories: \", feature)\r\n    df_train[feature] = df_train[feature].cat.remove_unused_categories()\r\n    df_test[feature] = df_test[feature].cat.remove_unused_categories()\r\n\r\n    gc.collect()\r\n\r\n    return df_train, df_test\r\n\r\nfor feature in freq_unused:\r\n    train, test = frequency_and_unused(train, test, feature=feature, threshold=1000)\r\n\r\ngc.collect()\r\n\r\ndef numerical_encode(df_train, df_test, features, bins=200):\r\n    for feature in features:\r\n        print(\"Encoding Feature: \", feature)\r\n        df_train = df_train.replace({feature: \r\n                                     {np.nan:'0'}})\r\n        df_train[feature] = df_train[feature].astype('float32')\r\n        df_train[feature] = pd.cut(df_train[feature].values, bins=bins, labels=False)\r\n\r\n        df_test = df_test.replace({feature: \r\n                                     {np.nan:'0'}})\r\n        df_test[feature] = df_test[feature].astype('float32')\r\n        df_test[feature] = pd.cut(df_test[feature].values, bins=bins, labels=False)\r\n    return df_train, df_test\r\n\r\nbin_one = ['Census_SystemVolumeTotalCapacity', 'Census_PrimaryDiskTotalCapacity']\r\ntrain, test = numerical_encode(train, test, features=bin_one, bins=[0, 16000, 256000, 512000, 1024000, 2048000, 999999999])\r\n\r\ntrain, test = numerical_encode(train, test, features=['Census_TotalPhysicalRAM'], bins=[0, 1024, 4096, 8192, 16000, 32000, 64000, 999999999])\r\n\r\ntrain, test = numerical_encode(train, test, features=['Census_InternalPrimaryDisplayResolutionVertical'], bins=[0, 480, 600, 768, 800, 900, 1024, 1080, 1440, 1800, 2160, 99999999])\r\n\r\ntrain, test = numerical_encode(train, test, features=['Census_InternalPrimaryDisplayResolutionHorizontal'], bins=[0, 768, 800, 1024, 1080, 1280, 1366, 1440, 1600, 1680, 1920, 2160, 2560, 3200, 99999999])\r\n\r\ntrain, test = numerical_encode(train, test, features=['Census_InternalPrimaryDiagonalDisplaySizeInInches'], bins=[0, 10, 11, 13, 14, 15, 16, 18, 20, 22, 23, 24, 27, 30, 50, 70, 999999999])\r\n\r\ngc.collect()\r\n\r\n\r\nprint(\"Time Encoding Features\")\r\n\r\nfor feature in time_features:\r\n    #Convolute Version Numbers\r\n    if feature == 'EngineVersion':\r\n        print(\"Time Encoding Feature: \", feature)\r\n        version_number = []\r\n        for line in train['EngineVersion']:\r\n            col = line.split('.')  #gives third colum value of version number 1.1.\"2133\".3\r\n            if int(col[2]) <= 12800: col[2] = 12800  #bin all really old version\r\n            if int(col[2]) == 15300: col[2] = 15400\r\n            col[2] = int(round(int(col[2])/100))\r\n            version_number.append(int(col[2])+2) #shift training data to match test data\r\n        train['EngineVersion'] = version_number\r\n        version_number = []\r\n        for line in test['EngineVersion']:\r\n            col = line.split('.')  #gives second colum value of version number 1.\"273\".2133.3\r\n            if int(col[2]) <= 13000: col[2] = 13000  #bin all really old version\r\n            col[2] = int(round(int(col[2])/100))\r\n            version_number.append(col[2])\r\n        test['EngineVersion'] = version_number #now in range 120 - 155\r\n        del col\r\n        gc.collect()\r\n        \r\n    #Convolute Version Numbers\r\n    if feature == 'AppVersion':\r\n        print(\"Time Encoding Feature: \", feature)\r\n        version_number = []\r\n        for line in train['AppVersion']:\r\n            #print(line)\r\n            col = line.split('.')  #gives second colum value of version number 1.\"273\".2133.3\r\n            version_number.append(int(col[1]))\r\n        train['AppVersion'] = version_number\r\n        version_number = []\r\n        for line in test['AppVersion']:\r\n            col = line.split('.')  #gives second colum value of version number 1.\"273\".2133.3\r\n            version_number.append(int(col[1]))\r\n        test['AppVersion'] = version_number #now in range 4 - 18\r\n        del col\r\n        gc.collect()\r\n\r\n    #Convolute Version Numbers\r\n    if feature == 'AvSigVersion':\r\n        print(\"Time Encoding Feature: \", feature)\r\n        version_number = []\r\n        for line in train['AvSigVersion']:\r\n            #print(line)\r\n            #print(version.parse(str(line)))\r\n            col = line.split('.')  #gives second colum value of version number 1.\"273\".2133.3\r\n            if str(col[1]) == '2&#x17;3': col[1] = 217 #data correction\r\n            if int(col[1]) == 0: col[1] = 275  #fault value mapped to most common value\r\n            if int(col[1]) <= 216: col[1] = 216  #bin all really old version\r\n            version_number.append(int(col[1])+4) #shift training data to match test data\r\n        train['AvSigVersion'] = version_number\r\n        version_number = []\r\n        for line in test['AvSigVersion']:\r\n            #print(line)\r\n            #print(version.parse(str(line)))\r\n            col = line.split('.')  #gives second colum value of version number 1.\"273\".2133.3\r\n            if int(col[1]) == 0: col[1] = 277  #fault value mapped to most common value\r\n            if int(col[1]) <= 220: col[1] = 220  #bin all really old version\r\n            version_number.append(int(col[1]))\r\n        test['AvSigVersion'] = version_number\r\n        del col\r\n        gc.collect()\r\n\r\ngc.collect()\r\n\r\n#Encode AVProductsInstalled\r\nprint(\"Hand encoding AVProductsInstalled\")\r\ntrain = train.replace({'AVProductsInstalled': \r\n                             {np.nan:None,\r\n                              '5':'4',\r\n                              '6':'4',\r\n                              '7':'4',\r\n                              '0':None\r\n                             }})\r\n        \r\ntest = test.replace({'AVProductsInstalled': \r\n                             {np.nan:None,\r\n                              '5':'4',\r\n                              '6':'4',\r\n                              '7':'4',\r\n                              '0':None\r\n                             }})\r\nprint(\"Hand encoding AVProductsInstalled -- done\")\r\n\r\ngc.collect()\r\n\r\n#Encode UacLuaenable\r\nprint(\"Hand encoding UacLuaenable\")\r\ntrain = train.replace({'UacLuaenable': \r\n                             {np.nan:None,\r\n                              '0':None,\r\n                              '2':None,\r\n                              '3':None,\r\n                              '16777216':None,\r\n                              '6357062':None,\r\n                              '5':None,\r\n                              '7798884':None,\r\n                              '48':None,\r\n                              '49':None,\r\n                              '255':None\r\n                             }})\r\ntest = test.replace({'UacLuaenable': \r\n                             {np.nan:None,\r\n                              '0':None,\r\n                              '2':None,\r\n                              '3':None,\r\n                              '5':None,\r\n                              '6357062':None,\r\n                              '808482880':None,\r\n                              '537591872':None,\r\n                              '537591856':None,\r\n                              '808482864':None,\r\n                              '48':None,\r\n                              '49':None\r\n                             }})\r\nprint(\"Hand encoding UacLuaenable -- done\")\r\n\r\ngc.collect()\r\n\r\n\r\n#Encode RtpStateBitfield\r\nprint(\"Hand encoding RtpStateBitfield\")\r\ntrain = train.replace({'RtpStateBitfield': \r\n                             {np.nan:None,\r\n                              '3':None,\r\n                              '1':None,\r\n                              '35':None,\r\n                              '40':None\r\n                             }})\r\ntest = test.replace({'RtpStateBitfield': \r\n                             {np.nan:None,\r\n                              '3':None,\r\n                              '1':None,\r\n                              '35':None,\r\n                              '40':None\r\n                             }})\r\nprint(\"Hand encoding RtpStateBitfield -- done\")\r\n\r\ngc.collect()\r\n\r\n\r\n#Encode Census_GenuineStateName\r\nprint(\"Hand encoding Census_GenuineStateName\")\r\ntrain = train.replace({'Census_GenuineStateName': \r\n                             {np.nan:None,\r\n                              'UNKNOWN':None,\r\n                              'TAMPERED':None\r\n                             }})\r\ntest = test.replace({'Census_GenuineStateName': \r\n                             {np.nan:None,\r\n                              'UNKNOWN':None,\r\n                              'TAMPERED':None\r\n                             }})\r\nprint(\"Hand encoding Census_GenuineStateName -- done\")\r\n\r\ngc.collect()\r\n\r\n\r\n#Encode SmartScreen\r\nprint(\"Hand encoding SmartScreen\")\r\ntrain = train.replace({'SmartScreen': \r\n                         {np.nan:None,\r\n                          '&#x01;':None,\r\n                          '&#x02;':None,\r\n                          '&#x03;':None,\r\n                          'Deny':None,\r\n                          '0':None,\r\n                          '00000000':None,\r\n                          'on':'On',\r\n                          'Enabled':'On',\r\n                          'requireadmin':'RequireAdmin',\r\n                          'requireAdmin':'RequireAdmin',\r\n                          'RequiredAdmin':'RequireAdmin',\r\n                          'off':'Off',\r\n                          'OFF':'Off',\r\n                          'of':'Off',\r\n                          'Promt':'Prompt',\r\n                          'prompt':'Prompt',\r\n                          'Promprt':'Prompt',\r\n                          'warn':'Warn',\r\n                          'BLOCK':'Block'\r\n                         }})\r\ntest = test.replace({'SmartScreen':\r\n                         {np.nan:None,\r\n                          '&#x01;':None,\r\n                          '&#x02;':None,\r\n                          '&#x03;':None,\r\n                          'Deny':None,\r\n                          '0':None,\r\n                          '00000000':None,\r\n                          'on':'On',\r\n                          'ON':'On',\r\n                          'Enabled':'On',\r\n                          'requireadmin':'RequireAdmin',\r\n                          'requireAdmin':'RequireAdmin',\r\n                          'RequiredAdmin':'RequireAdmin',\r\n                          'off':'Off',\r\n                          'OFF':'Off',\r\n                          'of':'Off',\r\n                          'Promt':'Prompt',\r\n                          'prompt':'Prompt',\r\n                          'Promprt':'Prompt',\r\n                          'warn':'Warn',\r\n                          'BLOCK':'Block'\r\n                         }})\r\nprint(\"Hand encoding SmartScreen -- done\")\r\n\r\n\r\ngc.collect()\r\n\r\n#Encode Census_ProcessorManufacturerIdentifier\r\nprint(\"Hand encoding Census_ProcessorManufacturerIdentifier\")\r\ntrain = train.replace({'Census_ProcessorManufacturerIdentifier': \r\n                         {np.nan:None,\r\n                          '2':None,\r\n                          '3':None,\r\n                          '4':None,\r\n                          '5':None,\r\n                          '6':None,\r\n                          '7':None,\r\n                          '8':None,\r\n                          '9':None,\r\n                          '10':None\r\n                         }})\r\ntest = test.replace({'Census_ProcessorManufacturerIdentifier': \r\n                         {np.nan:None,\r\n                          '2':None,\r\n                          '3':None,\r\n                          '4':None,\r\n                          '5':None,\r\n                          '6':None,\r\n                          '7':None,\r\n                          '8':None,\r\n                          '9':None,\r\n                          '10':None\r\n                         }})\r\nprint(\"Hand encoding Census_ProcessorManufacturerIdentifier -- done\")\r\n\r\n\r\ngc.collect()\r\n\r\n#Encode Census_ProcessorCoreCount\r\nprint(\"Hand encoding Census_ProcessorCoreCount\")\r\ntrain = train.replace({'Census_ProcessorCoreCount': \r\n                             {np.nan:None,\r\n                              '5':'6',\r\n                              '7':'6',\r\n                              '9':'12',\r\n                              '10':'12',\r\n                              '11':'12',\r\n                              '13':'12',\r\n                              '14':'12',\r\n                              '15':'16',\r\n                              '17':'16',\r\n                              '18':'16',\r\n                              '32':'16',\r\n                              '24':'16',\r\n                              '20':'16',\r\n                              '40':'16',\r\n                              '36':'16',\r\n                              '28':'16',\r\n                              '48':'16',\r\n                              '56':'16',\r\n                              '64':'16',\r\n                              '72':'16',\r\n                              '88':'16',\r\n                              '80':'16',\r\n                              '44':'16',\r\n                              '30':'16',\r\n                              '96':'16',\r\n                              '112':'16',\r\n                              '22':'16',\r\n                              '46':'16',\r\n                              '52':'16',\r\n                              '128':'16',\r\n                              '104':'16',\r\n                              '26':'16',\r\n                              '50':'16',\r\n                              '54':'16',\r\n                              '144':'16',\r\n                              '120':'16',\r\n                              '192':'16',\r\n                              '25':'16'\r\n                             }})\r\ntest = test.replace({'Census_ProcessorCoreCount': \r\n                             {np.nan:None,\r\n                              '5':'6',\r\n                              '7':'6',\r\n                              '9':'12',\r\n                              '10':'12',\r\n                              '11':'12',\r\n                              '13':'12',\r\n                              '14':'12',\r\n                              '15':'16',\r\n                              '17':'16',\r\n                              '18':'16',\r\n                              '32':'16',\r\n                              '24':'16',\r\n                              '20':'16',\r\n                              '40':'16',\r\n                              '36':'16',\r\n                              '28':'16',\r\n                              '48':'16',\r\n                              '56':'16',\r\n                              '64':'16',\r\n                              '72':'16',\r\n                              '88':'16',\r\n                              '80':'16',\r\n                              '44':'16',\r\n                              '30':'16',\r\n                              '96':'16',\r\n                              '112':'16',\r\n                              '22':'16',\r\n                              '46':'16',\r\n                              '52':'16',\r\n                              '128':'16',\r\n                              '104':'16',\r\n                              '26':'16',\r\n                              '50':'16',\r\n                              '54':'16',\r\n                              '144':'16',\r\n                              '120':'16',\r\n                              '192':'16',\r\n                              '25':'16',\r\n                              '23':'16',\r\n                              '224':'16',\r\n                              '19':'16',\r\n                              '35':'16'\r\n                             }})\r\nprint(\"Hand encoding Census_ProcessorCoreCount -- done\")\r\n\r\ngc.collect()\r\n\r\nprint(\"List all values that are not in both sets:\")\r\nfor feature in usecolums:\r\n    trainvaluesnotintest = set(train[feature].unique()) - set(test[feature].unique())\r\n    print(feature, \": Not in TEST: \", trainvaluesnotintest)\r\n    testvaluesnotintest = set(test[feature].unique()) - set(train[feature].unique())\r\n    print(feature, \": Not in TRAIN: \", testvaluesnotintest)\r\n    del trainvaluesnotintest, testvaluesnotintest\r\nprint(\"List all values that are not in both sets --- END\")\r\n\r\ngc.collect()\r\n\r\nprint('Transform all features to category.\\n')\r\nfor usecol in train.columns.tolist()[1:-1]:\r\n    print(\"Transforming: \", usecol)\r\n    train[usecol] = train[usecol].astype('str')\r\n    test[usecol] = test[usecol].astype('str')\r\n    \r\n    #Fit LabelEncoder\r\n    le = LabelEncoder().fit(\r\n            np.unique(train[usecol].unique().tolist()+\r\n                      test[usecol].unique().tolist()))\r\n\r\n    #At the end 0 will be used for dropped values\r\n    train[usecol] = le.transform(train[usecol])+1\r\n    test[usecol]  = le.transform(test[usecol])+1\r\n\r\n    agg_tr = (train\r\n              .groupby([usecol])\r\n              .aggregate({'MachineIdentifier':'count'})\r\n              .reset_index()\r\n              .rename({'MachineIdentifier':'Train'}, axis=1))\r\n    agg_te = (test\r\n              .groupby([usecol])\r\n              .aggregate({'MachineIdentifier':'count'})\r\n              .reset_index()\r\n              .rename({'MachineIdentifier':'Test'}, axis=1))\r\n\r\n    agg = pd.merge(agg_tr, agg_te, on=usecol, how='outer').replace(np.nan, 0)\r\n    #Select values with more than 1000 observations\r\n    agg = agg[(agg['Train'] > 1000)].reset_index(drop=True)\r\n    agg['Total'] = agg['Train'] + agg['Test']\r\n    #Drop unbalanced values\r\n    agg = agg[(agg['Train'] / agg['Total'] > 0.2) & (agg['Train'] / agg['Total'] < 0.8)]\r\n    agg[usecol+'Copy'] = agg[usecol]\r\n\r\n    train[usecol] = (pd.merge(train[[usecol]], \r\n                              agg[[usecol, usecol+'Copy']], \r\n                              on=usecol, how='left')[usecol+'Copy']\r\n                     .replace(np.nan, 0).astype('int').astype('category'))\r\n\r\n    test[usecol]  = (pd.merge(test[[usecol]], \r\n                              agg[[usecol, usecol+'Copy']], \r\n                              on=usecol, how='left')[usecol+'Copy']\r\n                     .replace(np.nan, 0).astype('int').astype('category'))\r\n\r\n    del le, agg_tr, agg_te, agg, usecol\r\n    gc.collect()\r\n          \r\ny_train = np.array(train['HasDetections'])\r\ntrain_ids = train.index\r\ntest_ids  = test.index\r\n\r\ndel train['HasDetections'], train['MachineIdentifier'], test['MachineIdentifier']\r\ngc.collect()\r\n\r\n\r\nprint(\"List all values that are not in both sets:\")\r\nfor feature in usecolums:\r\n    trainvaluesnotintest = set(train[feature].unique()) - set(test[feature].unique())\r\n    print(feature, \": Not in TEST: \", trainvaluesnotintest)\r\n    testvaluesnotintest = set(test[feature].unique()) - set(train[feature].unique())\r\n    print(feature, \": Not in TRAIN: \", testvaluesnotintest)\r\n    del trainvaluesnotintest, testvaluesnotintest\r\nprint(\"List all values that are not in both sets --- END\")\r\n\r\n\r\n\r\nprint(\"If you don't want use Sparse Matrix choose Kernel Version 2 to get simple solution.\\n\")\r\n\r\nprint('--------------------------------------------------------------------------------------------------------')\r\nprint('Transform Data to Sparse Matrix.')\r\nprint('Sparse Matrix can be used to fit a lot of models, eg. XGBoost, LightGBM, Random Forest, K-Means and etc.')\r\nprint('To concatenate Sparse Matrices by column use hstack()')\r\nprint('Read more about Sparse Matrix https://docs.scipy.org/doc/scipy/reference/sparse.html')\r\nprint('Good Luck!')\r\nprint('--------------------------------------------------------------------------------------------------------')\r\n\r\n#Fit OneHotEncoder\r\nohe = OneHotEncoder(categories='auto', sparse=True, dtype='uint8').fit(train)\r\n\r\n#Transform data using small groups to reduce memory usage\r\nm = 100000\r\n\r\ntrain = vstack([ohe.transform(train[i*m:(i+1)*m]) for i in range(train.shape[0] // m + 1)])\r\ntest  = vstack([ohe.transform(test[i*m:(i+1)*m])  for i in range(test.shape[0] // m +  1)])\r\nsave_npz('train.npz', train, compressed=True)\r\nsave_npz('test.npz',  test,  compressed=True)\r\n\r\ndel ohe, train, test\r\ngc.collect()\r\n\r\nskf = StratifiedKFold(n_splits=5, shuffle=True, random_state=42)\r\nskf.get_n_splits(train_ids, y_train)\r\n\r\nlgb_test_result  = np.zeros(test_ids.shape[0])\r\nlgb_train_result = np.zeros(train_ids.shape[0])\r\n\r\ncounter = 0\r\n\r\nprint('\\nLightGBM\\n')\r\n\r\nfor train_index, test_index in skf.split(train_ids, y_train):\r\n    \r\n    print('Fold {}\\n'.format(counter + 1))\r\n    \r\n    train = load_npz('train.npz')\r\n    X_fit = vstack([train[train_index[i*m:(i+1)*m]] for i in range(train_index.shape[0] // m + 1)])\r\n    X_val = vstack([train[test_index[i*m:(i+1)*m]]  for i in range(test_index.shape[0] //  m + 1)])\r\n    X_fit, X_val = csr_matrix(X_fit, dtype='float32'), csr_matrix(X_val, dtype='float32')\r\n    y_fit, y_val = y_train[train_index], y_train[test_index]\r\n    \r\n    del train\r\n    gc.collect()\r\n\r\n    lgb_model = lgb.LGBMClassifier(max_depth=-1,\r\n                                   n_estimators=30000,\r\n                                   learning_rate=0.05,\r\n                                   num_leaves=2**12-1,\r\n                                   colsample_bytree=0.28,\r\n                                   objective='binary', \r\n                                   n_jobs=-1)\r\n                               \r\n    lgb_model.fit(X_fit, y_fit, eval_metric='auc', \r\n                  eval_set=[(X_val, y_val)], \r\n                  verbose=100, early_stopping_rounds=100)\r\n    \r\n    del X_fit, X_val, y_fit, y_val, train_index, test_index\r\n    gc.collect()\r\n    \r\n    test = load_npz('test.npz')\r\n    test = csr_matrix(test, dtype='float32')\r\n    lgb_test_result += lgb_model.predict_proba(test)[:,1]\r\n    counter += 1\r\n    \r\n    del test\r\n    gc.collect()\r\n    \r\n    #Stop fitting to prevent time limit error\r\n    if counter == 1 : break\r\n\r\nsubmission = pd.read_csv('../input/sample_submission.csv')\r\nsubmission['HasDetections'] = lgb_test_result / counter\r\nsubmission.to_csv('lgb_submission.csv', index=False)\r\n\r\nprint('\\nDone.')","metadata":{"_uuid":"869cab75-3b6a-4d7a-a792-0826b92a049e","_cell_guid":"56d5e484-ad85-46e0-acbc-83964d808fe9","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":null}]}