{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"pygments_lexer":"ipython3","nbconvert_exporter":"python","version":"3.6.4","file_extension":".py","codemirror_mode":{"name":"ipython","version":3},"name":"python","mimetype":"text/x-python"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":10683,"databundleVersionId":220065,"sourceType":"competition"}],"dockerImageVersionId":22557,"isInternetEnabled":false,"language":"python","sourceType":"script","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# %% [code]\nimport pandas as pd\r\nimport numpy as np\r\nimport lightgbm as lgb\r\nfrom sklearn.preprocessing import LabelEncoder\r\nimport gc\r\ngc.enable()\r\n\r\n\r\ndtypes = {\r\n    'MachineIdentifier': 'category',\r\n    'ProductName': 'category',\r\n    'EngineVersion': 'category',\r\n    'AppVersion': 'category',\r\n    'AvSigVersion': 'category',\r\n    'IsBeta': 'int8',\r\n    'RtpStateBitfield': 'float16',\r\n    'IsSxsPassiveMode': 'int8',\r\n    'DefaultBrowsersIdentifier': 'float16',\r\n    'AVProductStatesIdentifier': 'float32',\r\n    'AVProductsInstalled': 'float16',\r\n    'AVProductsEnabled': 'float16',\r\n    'HasTpm': 'int8',\r\n    'CountryIdentifier': 'int16',\r\n    'CityIdentifier': 'float32',\r\n    'OrganizationIdentifier': 'float16',\r\n    'GeoNameIdentifier': 'float16',\r\n    'LocaleEnglishNameIdentifier': 'int8',\r\n    'Platform': 'category',\r\n    'Processor': 'category',\r\n    'OsVer': 'category',\r\n    'OsBuild': 'int16',\r\n    'OsSuite': 'int16',\r\n    'OsPlatformSubRelease': 'category',\r\n    'OsBuildLab': 'category',\r\n    'SkuEdition': 'category',\r\n    'IsProtected': 'float16',\r\n    'AutoSampleOptIn': 'int8',\r\n    'PuaMode': 'category',\r\n    'SMode': 'float16',\r\n    'IeVerIdentifier': 'float16',\r\n    'SmartScreen': 'category',\r\n    'Firewall': 'float16',\r\n    'UacLuaenable': 'float32',\r\n    'Census_MDC2FormFactor': 'category',\r\n    'Census_DeviceFamily': 'category',\r\n    'Census_OEMNameIdentifier': 'float16',\r\n    'Census_OEMModelIdentifier': 'float32',\r\n    'Census_ProcessorCoreCount': 'float16',\r\n    'Census_ProcessorManufacturerIdentifier': 'float16',\r\n    'Census_ProcessorModelIdentifier': 'float16',\r\n    'Census_ProcessorClass': 'category',\r\n    'Census_PrimaryDiskTotalCapacity': 'float32',\r\n    'Census_PrimaryDiskTypeName': 'category',\r\n    'Census_SystemVolumeTotalCapacity': 'float32',\r\n    'Census_HasOpticalDiskDrive': 'int8',\r\n    'Census_TotalPhysicalRAM': 'float32',\r\n    'Census_ChassisTypeName': 'category',\r\n    'Census_InternalPrimaryDiagonalDisplaySizeInInches': 'float16',\r\n    'Census_InternalPrimaryDisplayResolutionHorizontal': 'float16',\r\n    'Census_InternalPrimaryDisplayResolutionVertical': 'float16',\r\n    'Census_PowerPlatformRoleName': 'category',\r\n    'Census_InternalBatteryType': 'category',\r\n    'Census_InternalBatteryNumberOfCharges': 'float32',\r\n    'Census_OSVersion': 'category',\r\n    'Census_OSArchitecture': 'category',\r\n    'Census_OSBranch': 'category',\r\n    'Census_OSBuildNumber': 'int16',\r\n    'Census_OSBuildRevision': 'int32',\r\n    'Census_OSEdition': 'category',\r\n    'Census_OSSkuName': 'category',\r\n    'Census_OSInstallTypeName': 'category',\r\n    'Census_OSInstallLanguageIdentifier': 'float16',\r\n    'Census_OSUILocaleIdentifier': 'int16',\r\n    'Census_OSWUAutoUpdateOptionsName': 'category',\r\n    'Census_IsPortableOperatingSystem': 'int8',\r\n    'Census_GenuineStateName': 'category',\r\n    'Census_ActivationChannel': 'category',\r\n    'Census_IsFlightingInternal': 'float16',\r\n    'Census_IsFlightsDisabled': 'float16',\r\n    'Census_FlightRing': 'category',\r\n    'Census_ThresholdOptIn': 'float16',\r\n    'Census_FirmwareManufacturerIdentifier': 'float16',\r\n    'Census_FirmwareVersionIdentifier': 'float32',\r\n    'Census_IsSecureBootEnabled': 'int8',\r\n    'Census_IsWIMBootEnabled': 'float16',\r\n    'Census_IsVirtualDevice': 'float16',\r\n    'Census_IsTouchEnabled': 'int8',\r\n    'Census_IsPenCapable': 'int8',\r\n    'Census_IsAlwaysOnAlwaysConnectedCapable': 'float16',\r\n    'Wdft_IsGamer': 'float16',\r\n    'Wdft_RegionIdentifier': 'float16',\r\n    'HasDetections': 'int8'\r\n}\r\n\r\ncontinuous_columns = [  # All the columns which have a real continuous data\r\n    'Census_ProcessorCoreCount',\r\n    'Census_PrimaryDiskTotalCapacity',\r\n    'Census_SystemVolumeTotalCapacity',\r\n    'Census_TotalPhysicalRAM',\r\n    'Census_InternalPrimaryDiagonalDisplaySizeInInches',\r\n    'Census_InternalPrimaryDisplayResolutionHorizontal',\r\n    'Census_InternalPrimaryDisplayResolutionVertical',\r\n    'Census_InternalBatteryNumberOfCharges',\r\n    'Census_OSBuildNumber',\r\n    'Census_OSBuildRevision',\r\n    'Census_ThresholdOptIn',\r\n    'OsBuild'\r\n]\r\n\r\nbool_columns = [\r\n    'IsBeta',\r\n    'IsSxsPassiveMode',\r\n    'Census_IsPortableOperatingSystem',\r\n    'Census_IsSecureBootEnabled',\r\n    'Census_IsTouchEnabled',\r\n    'Census_IsPenCapable',\r\n    'HasTpm',\r\n    'Census_HasOpticalDiskDrive'\r\n]\r\n\r\nprint('Download Train and Test Data.\\n')\r\ntrain = pd.read_csv('../input/train.csv', dtype=dtypes, low_memory=True)\r\ntrain['MachineIdentifier'] = train.index.astype('uint32')\r\ntest = pd.read_csv('../input/test.csv', dtype=dtypes, low_memory=True)\r\ntest['MachineIdentifier'] = test.index.astype('uint32')\r\ndel dtypes\r\n\r\ngc.collect()\r\n\r\nprint('Transform all features to category.\\n')\r\ncategorical_feature = []\r\ncol_number = -1\r\nfor col_name in train.columns.tolist()[1:-1]:\r\n    col_number = col_number+1\r\n    if col_name in bool_columns:\r\n        continue\r\n    elif col_name in continuous_columns:\r\n        nan_val = train[col_name].astype('float32').mean()\r\n        train[col_name].fillna(nan_val, inplace=True)\r\n        test[col_name].fillna(nan_val, inplace=True)\r\n        del nan_val\r\n        continue\r\n    categorical_feature.append(col_number)\r\n    train[col_name] = train[col_name].astype('str')\r\n    test[col_name] = test[col_name].astype('str')\r\n\r\n    # Fit LabelEncoder\r\n    le = LabelEncoder().fit(\r\n        np.unique(train[col_name].unique().tolist() +\r\n                  test[col_name].unique().tolist()))\r\n\r\n    # At the end 0 will be used for dropped values\r\n    train[col_name] = le.transform(train[col_name]) + 1\r\n    test[col_name] = le.transform(test[col_name]) + 1\r\n\r\n    agg_tr = (train\r\n              .groupby([col_name])\r\n              .aggregate({'MachineIdentifier': 'count'})\r\n              .reset_index()\r\n              .rename({'MachineIdentifier': 'Train'}, axis=1))\r\n    agg_te = (test\r\n              .groupby([col_name])\r\n              .aggregate({'MachineIdentifier': 'count'})\r\n              .reset_index()\r\n              .rename({'MachineIdentifier': 'Test'}, axis=1))\r\n\r\n    agg = pd.merge(agg_tr, agg_te, on=col_name, how='outer').replace(np.nan, 0)\r\n    # Select values with more than 1000 observations\r\n    agg = agg[(agg['Train'] > 1000)].reset_index(drop=True)\r\n    agg['Total'] = agg['Train'] + agg['Test']\r\n    # Drop unbalanced values\r\n    agg = agg[(agg['Train'] / agg['Total'] > 0.2) & (agg['Train'] / agg['Total'] < 0.8)]\r\n    agg[col_name + 'Copy'] = agg[col_name]\r\n\r\n    train[col_name] = (pd.merge(train[[col_name]], agg[[col_name, col_name + 'Copy']],\r\n                                on=col_name, how='left')[col_name + 'Copy'].replace(np.nan, 0).astype('str'))\r\n\r\n    test[col_name] = (pd.merge(test[[col_name]], agg[[col_name, col_name + 'Copy']],\r\n                               on=col_name, how='left')[col_name + 'Copy'].replace(np.nan, 0).astype('str'))\r\n\r\n    # Fit LabelEncoder again to make the all the category to have continues numbers\r\n    le = LabelEncoder().fit(\r\n        np.unique(train[col_name].unique().tolist() +\r\n                  test[col_name].unique().tolist()))\r\n    train[col_name] = le.transform(train[col_name])\r\n    test[col_name] = le.transform(test[col_name])\r\n\r\n    del le, agg_tr, agg_te, agg\r\n    gc.collect()\r\n\r\n    mx = max(train[col_name].max(), test[col_name].max())\r\n    if mx < 2**7:\r\n        train[col_name] = train[col_name].astype('int8')\r\n        test[col_name] = test[col_name].astype('int8')\r\n    elif mx < 2**15:\r\n        train[col_name] = train[col_name].astype('int16')\r\n        test[col_name] = test[col_name].astype('int16')\r\n    else:\r\n        train[col_name] = train[col_name].astype('int32')\r\n        test[col_name] = test[col_name].astype('int32')\r\n    del col_name, mx\r\n\r\ndel col_number, continuous_columns, bool_columns\r\ngc.collect()\r\n\r\ny_train = np.array(train['HasDetections'])\r\ntest_ids = test.index\r\n\r\ndel train['HasDetections'], train['MachineIdentifier'], test['MachineIdentifier']\r\ngc.collect()\r\n\r\ntrain.to_pickle('train.pcl')\r\ntest.to_pickle('test.pcl')\r\nnp.save('y_train.npy', y_train)\r\ndel train, test\r\n\r\nlgb_test_probs = np.zeros(test_ids.shape[0], dtype=np.float32)\r\nlgb_test_result = np.zeros(test_ids.shape[0], dtype=np.float32)\r\n\r\nn_train_elements = y_train.shape[0]\r\nw = np.ones(n_train_elements, dtype=np.float32)\r\ndel n_train_elements, test_ids\r\n\r\nprint('\\nadaBoost with LightGBM:\\n')\r\nw_sum = 0\r\nn_iterations = 5\r\nm = 200000\r\nfor i in range(n_iterations):\r\n    print('iteration {}:\\n'.format(i+1))\r\n    print('The average of w is {}'. format(np.mean(w)))\r\n    print('The std of w is {}'. format(np.std(w)))\r\n\r\n    train = pd.read_pickle('train.pcl')\r\n    y_train = np.load('y_train.npy')\r\n\r\n    lgb_model = lgb.LGBMClassifier(max_depth=-1,\r\n                                   n_estimators=100,\r\n                                   learning_rate=0.05,\r\n                                   num_leaves=2 ** 12 - 1,\r\n                                   colsample_bytree=0.28,\r\n                                   objective='binary',\r\n                                   n_jobs=-1,\r\n                                   categorical_feature=categorical_feature,\r\n                                   cat_l2=50,\r\n                                   cat_smooth=0)\r\n    lgb_model.fit(train, y_train, sample_weight=w)\r\n\r\n    # Find the iteration weight\r\n    train_res = [lgb_model.predict(train.iloc[j*m:(j+1)*m]) for j in range(int(np.ceil(len(y_train)/m)))]\r\n    del train\r\n    gc.collect()\r\n    train_res = np.hstack(train_res)\r\n    dff = np.abs(train_res - y_train)\r\n    err = np.dot(w, dff) / np.sum(w)\r\n    iter_w = 0.5*np.log((1-err)/err)\r\n    print('The iteration error is {}', format(err))\r\n    print('The iteration weight is {}', format(iter_w))\r\n\r\n    # Update w\r\n    dff[dff == 1] = -1\r\n    dff[dff == 0] = 1\r\n    w *= np.exp(-iter_w*dff)\r\n\r\n    del train_res, y_train\r\n    gc.collect()\r\n\r\n    test = pd.read_pickle('test.pcl')\r\n    test_res = [lgb_model.predict_proba(test.iloc[j*m:(j+1)*m])[:, 1] for j in range(int(np.ceil(len(lgb_test_probs)/m)))]\r\n    test_res = np.hstack(test_res)\r\n    lgb_test_probs += iter_w*test_res\r\n    test_res = test_res > 0.5\r\n    lgb_test_result += iter_w*test_res\r\n    w_sum += iter_w\r\n\r\n    del test, dff, err, iter_w, lgb_model, test_res\r\n    gc.collect()\r\n\r\nsubmission = pd.read_csv('../input/sample_submission.csv')\r\nsubmission['HasDetections'] = lgb_test_result / w_sum\r\nfilename = 'adaBoost_lgb_absolute_res.csv'\r\nsubmission.to_csv(filename, index=False)\r\nsubmission['HasDetections'] = lgb_test_probs / w_sum\r\nfilename = 'adaBoost_lgb_prob_res.csv'\r\nsubmission.to_csv(filename, index=False)\r\n\r\nprint('\\nDone.')\r\n","metadata":{"_uuid":"af5ee107-e303-421a-96a9-7326c2ee9a85","_cell_guid":"c7d4ace5-eed2-4b9a-af48-8bfbd889ac71","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":null}]}