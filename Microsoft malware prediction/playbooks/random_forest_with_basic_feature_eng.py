{"metadata":{"kernelspec":{"display_name":"R","language":"R","name":"ir"},"language_info":{"mimetype":"text/x-r-source","name":"R","pygments_lexer":"r","version":"3.4.2","file_extension":".r","codemirror_mode":"r"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":10683,"databundleVersionId":220065,"sourceType":"competition"}],"dockerImageVersionId":21259,"isInternetEnabled":false,"language":"r","sourceType":"script","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# %% [code]\nlibrary(data.table)\nlibrary(randomForest)\n\nset.seed(123)\n\nprint(\"Loading files...\")\n\ntrain.raw <- fread(\"../input/train.csv\")\n# Due to the RAM limitation, sampling the train data\ntrain.raw <- train.raw[sample(nrow(train.raw), nrow(train.raw) * .50),]\n\ntest.raw <- fread(\"../input/test.csv\")\ntest.raw[, HasDetections := NA]\n\ndata.raw <- rbind(train.raw, test.raw)\n\nrm(train.raw)\nrm(test.raw)\ngc()\n\nprint(\"Converting columns...\")\n\ncols.keep <- c(\"Census_PrimaryDiskTotalCapacity\",\n               \"Census_SystemVolumeTotalCapacity\",\n               \"MachineIdentifier\",\n               \"HasDetections\")\nfor(colName in colnames(data.raw)) {\n  if(!(colName %in% cols.keep)) {\n    data.raw[[colName]] <- as.factor(data.raw[[colName]])\n  }\n}\n\nprint(\"Engineering features...\")\n\ndata.raw[[\"Census_PrimaryDiskTotalCapacityCategory\"]] <-\n  cut(data.raw[[\"Census_PrimaryDiskTotalCapacity\"]],\n    c(0, 1024*32, 1024*64, 1024*128, Inf))\n\ntemp <- substr(data.raw[[\"EngineVersion\"]], 5, length(data.raw[[\"EngineVersion\"]]))\ntemp <- substr(temp, 1, regexpr(\"\\\\.\", temp) - 1)\ntemp <- substr(temp, 1, 2)\ntemp <- ifelse(temp %in% c(\"12\",\n                           \"13\",\n                           \"14\",\n                           \"15\"),\n               temp,\n               \"other\")\ndata.raw[[\"EngineVersionCategory\"]] <- as.factor(temp)\n\ntemp <- substr(data.raw[[\"AppVersion\"]], 1, 4)\ndata.raw[[\"AppVersionCategory\"]] <- as.factor(temp)\n\ntemp <- tolower(data.raw[[\"SmartScreen\"]])\ntemp <- gsub(\"requiredadmin\", \"requireadmin\", temp)\ntemp <- gsub(\"promt\", \"prompt\", temp)\ntemp <- gsub(\"promprt\", \"prompt\", temp)\ntemp <- gsub(\"deny\", \"\", temp)\ntemp <- gsub(\"of$\", \"off\", temp)\ntemp <- ifelse(temp %in% c(\"block\",\n                           \"existsnotset\",\n                           \"off\",\n                           \"on\",\n                           \"prompt\",\n                           \"requireadmin\",\n                           \"warn\"),\n               temp,\n               \"other\")\ndata.raw[[\"SmartScreenCategory\"]] <- as.factor(temp)\n\ntemp <- as.integer(as.character(data.raw[[\"AVProductStatesIdentifier\"]]))\ntemp <- cut(temp, seq(1, 80001, by = 10000))\ndata.raw[[\"AVProductStatesIdentifierCategory\"]] <- temp\n\ntemp <- as.integer(as.character(data.raw[[\"IeVerIdentifier\"]]))\ntemp <- cut(temp, seq(1, 501, by = 50))\ndata.raw[[\"IeVerIdentifierCategory\"]] <- as.factor(temp)\n\nprint(\"Filling NAs...\")\n\nfactorCols <- unlist(lapply(data.raw, is.factor))\nfor(colName in colnames(data.raw[, ..factorCols])) {\n  if(!(colName %in% cols.keep)) {\n    data.raw[[colName]] <- factor(ifelse(!is.na(data.raw[[colName]]),\n                                         as.character(data.raw[[colName]]),\n                                         \"Missing\"))\n  }\n}\n\nprint(\"Training the model..\")\n\ndata.raw <- data.raw[, c(\n                        \"HasDetections\",\n                        \"MachineIdentifier\",\n                        \"Processor\",\n                        \"EngineVersionCategory\",\n                        \"AppVersionCategory\",\n                        \"SmartScreenCategory\",\n                        \"AVProductStatesIdentifierCategory\",\n                        \"IeVerIdentifierCategory\",\n                        \"Census_PrimaryDiskTotalCapacityCategory\",\n                        \"Census_IsVirtualDevice\",\n                        \"Wdft_IsGamer\"\n                        )]\n\ntrain.raw <- data.raw[!is.na(HasDetections),]\ntest.raw <- data.raw[is.na(HasDetections),]\n\n# Reducing memory usage as much as possible\nrm(data.raw)\ntrain.raw[, MachineIdentifier := NULL]\ntest.raw[, HasDetections := NULL]\ngc()\n\ntrain.raw$HasDetections <- as.factor(train.raw$HasDetections)\nmodel <- randomForest(HasDetections ~\n                        Processor +\n                        EngineVersionCategory +\n                        AppVersionCategory +\n                        SmartScreenCategory +\n                        AVProductStatesIdentifierCategory +\n                        IeVerIdentifierCategory +\n                        Census_PrimaryDiskTotalCapacityCategory +\n                        Census_IsVirtualDevice +\n                        Wdft_IsGamer,\n                      data = train.raw,\n                      ntree = 20)\ngc()\n\nprint(\"Making predictions...\")\n\nprob <- predict(model, newdata = test.raw, type = \"prob\")\ntest.raw$HasDetections <- prob[, 2]\n\nprint(\"Outputting the result...\")\n\nwrite.csv(test.raw[, c(\"MachineIdentifier\", \"HasDetections\")],\n          \"submission.csv\",\n          row.names = FALSE,\n          quote = FALSE)\n          \nprint(\"End of the script\")","metadata":{"_uuid":"9d5fa5b7-a4d1-47d6-9874-bcd42b52c5f8","_cell_guid":"b8670ad1-1e46-4bfd-b0fc-ef36dd2fcbec","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":null}]}