{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"pygments_lexer":"ipython3","nbconvert_exporter":"python","version":"3.6.4","file_extension":".py","codemirror_mode":{"name":"ipython","version":3},"name":"python","mimetype":"text/x-python"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":10683,"databundleVersionId":220065,"sourceType":"competition"}],"dockerImageVersionId":23025,"isInternetEnabled":false,"language":"python","sourceType":"script","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# %% [code]\n#imports\r\nimport numpy as np\r\nimport pandas as pd\r\nimport gc\r\nimport time\r\nimport random\r\nfrom lightgbm import LGBMClassifier\r\nfrom sklearn.metrics import roc_auc_score, roc_curve\r\nfrom sklearn.model_selection import StratifiedKFold\r\nimport matplotlib.pyplot as plot\r\nimport seaborn as sb\r\n\r\n#vars\r\ndataFolder = '../input/'\r\nsubmissionFileName = 'submission'\r\ntrainFile='train.csv'\r\ntestFile='test.csv'\r\n#used 4000000 nr of rows in stead of 8000000 because of Kernel memory issue\r\nnumberOfRows = 4000000\r\n\r\nseed = 6001\r\nnp.random.seed(seed)\r\nrandom.seed(seed)\r\n\r\ndef displayImportances(featureImportanceDf, submissionFileName):\r\n    cols = featureImportanceDf[[\"feature\", \"importance\"]].groupby(\"feature\").mean().sort_values(by = \"importance\", ascending = False).index\r\n    bestFeatures = featureImportanceDf.loc[featureImportanceDf.feature.isin(cols)]\r\n    plot.figure(figsize = (14, 14))\r\n    sb.barplot(x = \"importance\", y = \"feature\", data = bestFeatures.sort_values(by = \"importance\", ascending = False))\r\n    plot.title('LightGBM Features')\r\n    plot.tight_layout()\r\n    plot.savefig(submissionFileName + '.png')\r\n\r\ndtypes = {\r\n        'MachineIdentifier':                                    'category',\r\n        'ProductName':                                          'category',\r\n        'EngineVersion':                                        'category',\r\n        'AppVersion':                                           'category',\r\n        'AvSigVersion':                                         'category',\r\n        'IsBeta':                                               'int8',\r\n        'RtpStateBitfield':                                     'float16',\r\n        'IsSxsPassiveMode':                                     'int8',\r\n        'DefaultBrowsersIdentifier':                            'float16',\r\n        'AVProductStatesIdentifier':                            'float32',\r\n        'AVProductsInstalled':                                  'float16',\r\n        'AVProductsEnabled':                                    'float16',\r\n        'HasTpm':                                               'int8',\r\n        'CountryIdentifier':                                    'int16',\r\n        'CityIdentifier':                                       'float32',\r\n        'OrganizationIdentifier':                               'float16',\r\n        'GeoNameIdentifier':                                    'float16',\r\n        'LocaleEnglishNameIdentifier':                          'int8',\r\n        'Platform':                                             'category',\r\n        'Processor':                                            'category',\r\n        'OsVer':                                                'category',\r\n        'OsBuild':                                              'int16',\r\n        'OsSuite':                                              'int16',\r\n        'OsPlatformSubRelease':                                 'category',\r\n        'OsBuildLab':                                           'category',\r\n        'SkuEdition':                                           'category',\r\n        'IsProtected':                                          'float16',\r\n        'AutoSampleOptIn':                                      'int8',\r\n        'PuaMode':                                              'category',\r\n        'SMode':                                                'float16',\r\n        'IeVerIdentifier':                                      'float16',\r\n        'SmartScreen':                                          'category',\r\n        'Firewall':                                             'float16',\r\n        'UacLuaenable':                                         'float32',\r\n        'Census_MDC2FormFactor':                                'category',\r\n        'Census_DeviceFamily':                                  'category',\r\n        'Census_OEMNameIdentifier':                             'float16',\r\n        'Census_OEMModelIdentifier':                            'float32',\r\n        'Census_ProcessorCoreCount':                            'float16',\r\n        'Census_ProcessorManufacturerIdentifier':               'float16',\r\n        'Census_ProcessorModelIdentifier':                      'float16',\r\n        'Census_ProcessorClass':                                'category',\r\n        'Census_PrimaryDiskTotalCapacity':                      'float32',\r\n        'Census_PrimaryDiskTypeName':                           'category',\r\n        'Census_SystemVolumeTotalCapacity':                     'float32',\r\n        'Census_HasOpticalDiskDrive':                           'int8',\r\n        'Census_TotalPhysicalRAM':                              'float32',\r\n        'Census_ChassisTypeName':                               'category',\r\n        'Census_InternalPrimaryDiagonalDisplaySizeInInches':    'float16',\r\n        'Census_InternalPrimaryDisplayResolutionHorizontal':    'float16',\r\n        'Census_InternalPrimaryDisplayResolutionVertical':      'float16',\r\n        'Census_PowerPlatformRoleName':                         'category',\r\n        'Census_InternalBatteryType':                           'category',\r\n        'Census_InternalBatteryNumberOfCharges':                'float32',\r\n        'Census_OSVersion':                                     'category',\r\n        'Census_OSArchitecture':                                'category',\r\n        'Census_OSBranch':                                      'category',\r\n        'Census_OSBuildNumber':                                 'int16',\r\n        'Census_OSBuildRevision':                               'int32',\r\n        'Census_OSEdition':                                     'category',\r\n        'Census_OSSkuName':                                     'category',\r\n        'Census_OSInstallTypeName':                             'category',\r\n        'Census_OSInstallLanguageIdentifier':                   'float16',\r\n        'Census_OSUILocaleIdentifier':                          'int16',\r\n        'Census_OSWUAutoUpdateOptionsName':                     'category',\r\n        'Census_IsPortableOperatingSystem':                     'int8',\r\n        'Census_GenuineStateName':                              'category',\r\n        'Census_ActivationChannel':                             'category',\r\n        'Census_IsFlightingInternal':                           'float16',\r\n        'Census_IsFlightsDisabled':                             'float16',\r\n        'Census_FlightRing':                                    'category',\r\n        'Census_ThresholdOptIn':                                'float16',\r\n        'Census_FirmwareManufacturerIdentifier':                'float16',\r\n        'Census_FirmwareVersionIdentifier':                     'float32',\r\n        'Census_IsSecureBootEnabled':                           'int8',\r\n        'Census_IsWIMBootEnabled':                              'float16',\r\n        'Census_IsVirtualDevice':                               'float16',\r\n        'Census_IsTouchEnabled':                                'int8',\r\n        'Census_IsPenCapable':                                  'int8',\r\n        'Census_IsAlwaysOnAlwaysConnectedCapable':              'float16',\r\n        'Wdft_IsGamer':                                         'float16',\r\n        'Wdft_RegionIdentifier':                                'float16',\r\n        'HasDetections':                                        'int8'\r\n        }\r\n\r\nselectedFeatures = [  \r\n    'AVProductStatesIdentifier'\r\n    ,'AVProductsEnabled'\r\n    ,'IsProtected'\r\n    ,'Processor'\r\n    ,'OsSuite'\r\n    ,'IsProtected'\r\n    ,'RtpStateBitfield'\r\n    ,'AVProductsInstalled'\r\n    ,'Wdft_IsGamer'\r\n    ,'DefaultBrowsersIdentifier'\r\n    ,'OsBuild'\r\n    ,'Wdft_RegionIdentifier'\r\n    ,'SmartScreen'\r\n    ,'CityIdentifier'\r\n    ,'AppVersion'\r\n    ,'Census_IsSecureBootEnabled'\r\n    ,'Census_PrimaryDiskTypeName'\r\n    ,'Census_SystemVolumeTotalCapacity'\r\n    ,'Census_HasOpticalDiskDrive'\r\n    ,'Census_IsWIMBootEnabled'\r\n    ,'Census_IsVirtualDevice'\r\n    ,'Census_IsTouchEnabled'\r\n    ,'Census_FirmwareVersionIdentifier'\r\n    ,'GeoNameIdentifier'\r\n    ,'IeVerIdentifier'\r\n    ,'Census_FirmwareManufacturerIdentifier'\r\n    ,'Census_InternalPrimaryDisplayResolutionHorizontal'\r\n    ,'Census_InternalPrimaryDisplayResolutionVertical'\r\n    ,'Census_OEMModelIdentifier'\r\n    ,'Census_ProcessorModelIdentifier'\r\n    ,'Census_OSVersion'\r\n    ,'Census_InternalPrimaryDiagonalDisplaySizeInInches'\r\n    ,'Census_OEMNameIdentifier'\r\n    ,'Census_ChassisTypeName'\r\n    ,'Census_OSInstallLanguageIdentifier'\r\n    ,'EngineVersion'\r\n    ,'OrganizationIdentifier' \r\n    ,'CountryIdentifier'   \r\n    ,'Census_ActivationChannel'\r\n    ,'Census_ProcessorCoreCount'\r\n    ,'Census_OSWUAutoUpdateOptionsName'\r\n    ,'Census_InternalBatteryType'\r\n    ]\r\n    \r\n# Load Data with selected features\r\ntrainDf = pd.read_csv(dataFolder + trainFile, dtype=dtypes, usecols=selectedFeatures, low_memory=True, nrows = numberOfRows)\r\nlabels = pd.read_csv(dataFolder + trainFile, usecols = ['HasDetections'], nrows = numberOfRows)\r\ntestDf = pd.read_csv(dataFolder + testFile, dtype=dtypes, usecols=selectedFeatures, low_memory=True)\r\nprint('== Dataset Shapes ==')\r\nprint('Train : ' + str(trainDf.shape))\r\nprint('Labels : ' + str(labels.shape))\r\nprint('Test : ' + str(testDf.shape))\r\n\r\n# Append Datasets and Cleanup\r\ndf = trainDf.append(testDf).reset_index()\r\ndel trainDf, testDf\r\ngc.collect()\r\n\r\n# Modify SmartScreen Feature\r\ndf.loc[df.SmartScreen == 'off', 'SmartScreen'] = 'Off'\r\ndf.loc[df.SmartScreen == 'of', 'SmartScreen'] = 'Off'\r\ndf.loc[df.SmartScreen == 'OFF', 'SmartScreen'] = 'Off'\r\ndf.loc[df.SmartScreen == '00000000', 'SmartScreen'] = 'Off'\r\ndf.loc[df.SmartScreen == '0', 'SmartScreen'] = 'Off'       \r\ndf.loc[df.SmartScreen == 'ON', 'SmartScreen'] = 'On'\r\ndf.loc[df.SmartScreen == 'on', 'SmartScreen'] = 'On'\r\ndf.loc[df.SmartScreen == 'Enabled', 'SmartScreen'] = 'On'\r\ndf.loc[df.SmartScreen == 'BLOCK', 'SmartScreen'] = 'Block'\r\ndf.loc[df.SmartScreen == 'requireadmin', 'SmartScreen'] = 'RequireAdmin'\r\ndf.loc[df.SmartScreen == 'requireAdmin', 'SmartScreen'] = 'RequireAdmin'\r\ndf.loc[df.SmartScreen == 'RequiredAdmin', 'SmartScreen'] = 'RequireAdmin'\r\ndf.loc[df.SmartScreen == 'Promt', 'SmartScreen'] = 'Prompt'\r\ndf.loc[df.SmartScreen == 'Promprt', 'SmartScreen'] = 'Prompt'\r\ndf.loc[df.SmartScreen == 'prompt', 'SmartScreen'] = 'Prompt'\r\ndf.loc[df.SmartScreen == 'warn', 'SmartScreen'] = 'Warn'\r\ndf.loc[df.SmartScreen == 'Deny', 'SmartScreen'] = 'Block'\r\ndf.loc[df.SmartScreen == '&#x03;', 'SmartScreen'] = 'Off'\r\n\r\n#Count Encoding (with exceptions)\r\nfor col in [f for f in df.columns if f not in ['index','HasDetections','Census_SystemVolumeTotalCapacity']]:\r\n    df[col]=df[col].map(df[col].value_counts())\r\n\r\ndfDummy = pd.get_dummies(df, dummy_na=True)\r\nprint('Dummy: ' + str(dfDummy.shape))\r\n\r\n# Cleanup\r\ndel df\r\ngc.collect()\r\n\r\n# Split back to train and test\r\ntrain = dfDummy[:numberOfRows]\r\ntest = dfDummy[numberOfRows:]\r\n\r\n# Cleanup\r\ndel dfDummy\r\ngc.collect()\r\n\r\n# Summary Shape\r\nprint('== Dataset Shapes ==')\r\nprint('Train: ' + str(train.shape))\r\nprint('Test: ' + str(test.shape))\r\n\r\n# Summary Columns\r\nprint('== Dataset Columns ==')\r\nfeatures = [f for f in train.columns if f not in ['index']]\r\nfor feature in features:\r\n    print(feature)\r\n\r\n# CV Folds\r\nfolds = StratifiedKFold(n_splits = 5, shuffle = True, random_state = seed)\r\n\r\n# Create arrays and dataframes to store results\r\noofPreds = np.zeros(train.shape[0])\r\nsubPreds = np.zeros(test.shape[0])\r\nfeatureImportanceDf = pd.DataFrame()\r\n\r\n# Loop through all Folds.\r\nfor n_fold, (trainXId, validXId) in enumerate(folds.split(train[features], labels)):\r\n    # Create TrainXY and ValidationXY set based on fold-indexes\r\n    trainX, trainY = train[features].iloc[trainXId], labels.iloc[trainXId]\r\n    validX, validY = train[features].iloc[validXId], labels.iloc[validXId]\r\n\r\n    print('== Fold: ' + str(n_fold))\r\n\r\n    # LightGBM parameters\r\n    lgbm = LGBMClassifier(\r\n        objective = 'binary',\r\n        boosting_type = 'gbdt',\r\n        n_estimators = 2500,\r\n        learning_rate = 0.05, \r\n        num_leaves = 250,\r\n        min_data_in_leaf = 125, \r\n        bagging_fraction = 0.901,\r\n        max_depth = 13, \r\n        reg_alpha = 2.5,\r\n        reg_lambda = 2.5,\r\n        min_split_gain = 0.0001,\r\n        min_child_weight = 25,\r\n        feature_fraction = 0.5, \r\n        silent = -1,\r\n        verbose = -1,\r\n        #n_jobs is set to -1 instead of 4 otherwise the kernell will time out\r\n        n_jobs = -1) \r\n\r\n    lgbm.fit(trainX, trainY, \r\n        eval_set=[(trainX, trainY), (validX, validY)], \r\n        eval_metric = 'auc', \r\n        verbose = 250, \r\n        early_stopping_rounds = 100)\r\n\r\n    oofPreds[validXId] = lgbm.predict_proba(validX, num_iteration = lgbm.best_iteration_)[:, 1]\r\n    \r\n    print('Fold %2d AUC : %.6f' % (n_fold + 1, roc_auc_score(validY, oofPreds[validXId])))\r\n    \r\n    # cleanup\r\n    print('Cleanup')\r\n    del trainX, trainY, validX, validY\r\n    gc.collect()\r\n\r\n    subPreds += lgbm.predict_proba(test[features], num_iteration = lgbm.best_iteration_)[:, 1] / folds.n_splits\r\n        \r\n    # Feature Importance\r\n    fold_importance_df = pd.DataFrame()\r\n    fold_importance_df[\"feature\"] = features\r\n    fold_importance_df[\"importance\"] = lgbm.feature_importances_\r\n    fold_importance_df[\"fold\"] = n_fold + 1\r\n    featureImportanceDf = pd.concat([featureImportanceDf, fold_importance_df], axis=0)\r\n        \r\n    # cleanup\r\n    print('Cleanup. Post-Fold')\r\n    del lgbm\r\n    gc.collect()\r\n\r\nprint('Full AUC score %.6f' % roc_auc_score(labels, oofPreds))\r\n\r\n# Feature Importance\r\ndisplayImportances(featureImportanceDf, submissionFileName)\r\n\r\n# Generate Submission\r\nkaggleSubmission = pd.read_csv(dataFolder + 'sample_submission.csv')\r\nkaggleSubmission['HasDetections'] = subPreds\r\nkaggleSubmission.to_csv(submissionFileName + '.csv', index = False)","metadata":{"_uuid":"15baf751-00e4-4855-891b-b61ef5c406d9","_cell_guid":"fdcbd16e-9d81-4e57-b10b-b144722e3288","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":null}]}